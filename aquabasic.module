<?php
/**
 * @author Roberto Peruzzo <roberto.peruzzo@studioaqua.it>
 * @file
 * aquabasic.module
 *
 */


/**
 * Implements hook_menu()
 * @return array
 *   my menu's items.
 */

function aquabasic_menu()
{
  $items = array();

  $items['admin/config/development/regenerate-computed-fields'] = array(
    'title' => 'Re-generate computed fields',
    'description' => 'Re-generate computed fields.',
    //'page callback' => '_aqua_helper_touch_nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_aqua_helper_setting_form'),
    'access arguments' => array('administer nodes'),
    //'type' => MENU_CALLBACK,
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

/**
 * Callback
 */
function _aqua_helper_setting_form($form, $form_state)
{
  $form = array();
  $form['regenerate-fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Re-generate computed field'),
  );

  $form['regenerate-fields']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Re-generate'),
    '#submit' => array('_aqua_helper_settings_form_submit'),
  );
  return system_settings_form($form);
}
function _aqua_helper_settings_form_submit($form, &$form_state)
{
  _aqua_helper_touch_nodes();
}

/**
 * Callback
 * @return [type] [description]
 */
function _aqua_helper_touch_nodes()
{

  // Set here the machine name of your content type
  $content_type = 'orologio_lusso';

  // This query is used to load all the nids of a specific content type into an array.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('n.type', $content_type, '=');
  $result = $query->execute();

  $operations = array();
  // Set up an operations array with all node to "touch".
  // Each operation in the operations array means at least one new HTTP request,
  // running Drupal from scratch to accomplish the operation. If the operation
  // returns with $context['finished'] != TRUE, then it will be called again.
  // In this example, $context['finished'] is always TRUE.
  // For each nid this will load and then save the node
  while ($record = $result->fetchObject())
  {
    // Each operation is an array consisting of
    // - The function to call.
    // - An array of arguments to that function.
    $operations[] = array(
      '_batch_save_node',
      array(
        $record->nid,
        t('(Touch node @nid)', array('@nid' => $record->nid)),
      ),
    );
  }

  $batch = array(
    'title' => t('Re-generate computed field'),
    'operations' => $operations,
    'progress_message' => t('Touch. Node @current out of @total.'),
    'error_message' => t('Error!'),
    'finished' => '_batch_save_node_finished',
  );

  batch_set($batch);

}

/**
 * Batch operation: load and save a node (touch a node).
 *
 * This is the function that is called on each operation in batch.
 */
function _batch_save_node($nid, $operation_details, &$context)
{
  // This time limit is important, if it is removed the query will exceed the 30sec limit.
  set_time_limit(5);
  $node = node_load($nid);

  // Store some results for post-processing in the 'finished' callback.
  // The contents of 'results' will be available as $results in the
  // 'finished' function (in this example, batch_example_finished()).
  $context['results'][] = $node->nid . ' : ' . check_plain($node->title);

  // Optional message displayed under the progressbar.
  $context['message'] = t('Loading node "@title"', array('@title' => $node->title)) . ' ' . $operation_details;

  node_save($node);

  _batch_http_requests();
}

/**
 * Batch 'finished' callback.
 */
function _batch_save_node_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count results processed in @requests HTTP requests.', array('@count' => count($results), '@requests' => _batch_http_requests())));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * Utility function to increment HTTP requests in a session variable.
 */
function _batch_http_requests() {
  $_SESSION['http_request_count']++;
}

/**
 * Check to see if a user has been assigned a certain role.
 *
 * @param $role
 *   The name of the role you're trying to find.
 * @param $user
 *   The user object for the user you're checking; defaults to the current user.
 * @return
 *   TRUE if the user object has the role, FALSE if it does not.
 */
function aqua_user_has_role($role, $user = NULL)
{
  if ($user == NULL)
  {
    global $user;
  }

  if (is_array($user->roles) && in_array($role, array_values($user->roles)))
  {
    return TRUE;
  }

  return FALSE;
}

/**
 * This function returns the depth of a tid
 *  1 = first level
 *  2 = second level
 *  and so on...
 * It does assume that the tid is an existing term id.
 *
 * @param  int $tid taxonomy term ID
 * @return int
 */
function aqua_term_depth($tid)
{
  $parent = db_query(
    "SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid",
    array(':tid' => $tid))->fetchField();
  if($parent == 0)
  {
    return 1;
  }
  else
  {
    return 1+term_depth($parent);
  }
}

/**
 * This function deletes all given field instances.
 *
 * @param  array  $fields array of fields name.
 */
function aqua_delete_fields($fields_to_delete = array())
{
  foreach ($fields_to_delete as $field_name) {
    field_delete_field($field_name);
    watchdog(
      'aquabasic',
      'Deleted the :field_name field from all entity instances.',
      array(':field_name' => $field_name));
  }

  /**
   * The fields aren't really deleted until the purge function runs, ordinarily
   * during cron.  Count the number of fields we need to purge, and add five in
   * case a few other miscellaneous fields are in there somehow.
   */
  field_purge_batch(count($fields_to_delete) + 5);

  // THEN, in case of field type change, revert the feature
  //features_revert(array('sorelle_ronco' => array('field')));
}

